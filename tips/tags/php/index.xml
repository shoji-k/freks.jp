<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>freks tips</title>
    <link>https://freks.jp/tips/tags/php/index.xml</link>
    <description>Recent content on freks tips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://freks.jp/tips/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>eccube3</title>
      <link>https://freks.jp/tips/eccube3/</link>
      <pubDate>Mon, 16 Jan 2017 16:34:30 +0900</pubDate>
      
      <guid>https://freks.jp/tips/eccube3/</guid>
      <description>

&lt;h4 id=&#34;debug-mode&#34;&gt;debug mode&lt;/h4&gt;

&lt;p&gt;デバッグモード用のURLが用意されている&lt;br /&gt;
index_dev.phpを入れるとデバッグモード&lt;br /&gt;
&lt;a href=&#34;http://localhost/index_dev.php/sample/aaa&#34;&gt;http://localhost/index_dev.php/sample/aaa&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;plugin&#34;&gt;plugin&lt;/h4&gt;

&lt;p&gt;Customizeプラグインを作る場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Customize/
├── config.yml
├── Controller
│   ├── ConfigController.php
│   └── CustomizeController.php
├── event.yml
├── Form
│   └── Type
│       └── CustomizeConfigType.php
├── CustomizeEvent.php
├── LICENSE
├── PluginManager.php
├── Resource
│   └── template
│       ├── admin
│       │   └── config.twig
│       └── index.twig
└── ServiceProvider
    └── CustomizeServiceProvider.php
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プラグインの定義、ServiceProviderやEventの登録&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ServiceProviderディレクトリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;メインロジック、ルーティングの設定やFormのセットなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;event.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フックポイントとEvent methodをつなげる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CustomizeEvent.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;config.ymlにevent.ymlとつながるクラス名をセット&lt;br /&gt;
event.ymlとつなぐmethodを用意&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Controllerディレクトリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コントローラーを設置&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php</title>
      <link>https://freks.jp/tips/php/</link>
      <pubDate>Mon, 19 Dec 2016 15:16:16 +0900</pubDate>
      
      <guid>https://freks.jp/tips/php/</guid>
      <description>

&lt;h4 id=&#34;ワンライナーでphp-iniの場所を調べる&#34;&gt;ワンライナーでphp.iniの場所を調べる&lt;/h4&gt;

&lt;p&gt;$ php -r &amp;ldquo;phpinfo();&amp;rdquo; | grep php.ini&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>silex</title>
      <link>https://freks.jp/tips/silex/</link>
      <pubDate>Wed, 14 Dec 2016 13:54:42 +0900</pubDate>
      
      <guid>https://freks.jp/tips/silex/</guid>
      <description>

&lt;h3 id=&#34;starter&#34;&gt;starter&lt;/h3&gt;

&lt;p&gt;see &lt;a href=&#34;http://silex.sensiolabs.org/doc/master/usage.html&#34;&gt;Usage - Documentation - Silex - The PHP micro-framework based on the Symfony Components&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;$ composer require silex/silex:~2.0&lt;/p&gt;

&lt;p&gt;サンプルコードを用意&lt;br /&gt;
$ mkdir src&lt;br /&gt;
$ cd src&lt;br /&gt;
$ vim index.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

require_once __DIR__.&#39;/../vendor/autoload.php&#39;;

$app = new Silex\Application();

$app-&amp;gt;get(&#39;/hello/{name}&#39;, function ($name) use ($app) {
    return &#39;Hello &#39;.$app-&amp;gt;escape($name);
});

$app-&amp;gt;run();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動して確認する&lt;br /&gt;
$ cd ..&lt;br /&gt;
$ php -S localhost:8080 -t src&lt;br /&gt;
access &lt;a href=&#34;http://localhost:8080/hello/taro&#34;&gt;http://localhost:8080/hello/taro&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>symfony</title>
      <link>https://freks.jp/tips/symfony/</link>
      <pubDate>Wed, 14 Dec 2016 11:25:54 +0900</pubDate>
      
      <guid>https://freks.jp/tips/symfony/</guid>
      <description>

&lt;h3 id=&#34;starter&#34;&gt;starter&lt;/h3&gt;

&lt;p&gt;see &lt;a href=&#34;http://symfony.com/doc/2.8/setup.html&#34;&gt;Installing &amp;amp; Setting up the Symfony Framework (2.8)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symfonyのデモ付き一式ディストリビューションインストール&lt;br /&gt;
$ composer create-project symfony/framework-standard-edition my_project_name &amp;ldquo;2.8.*&amp;rdquo;&lt;/p&gt;

&lt;p&gt;環境チェック&lt;br /&gt;
$ php app/check.php
or&lt;br /&gt;
access &lt;a href=&#34;http://localhost:8000/config.php&#34;&gt;http://localhost:8000/config.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使えるservicesを確認&lt;br /&gt;
php app/console debug:container&lt;/p&gt;

&lt;p&gt;起動&lt;br /&gt;
$ php app/console server:run&lt;/p&gt;

&lt;p&gt;コントローラーをつくってhtmlを返す&lt;br /&gt;
ルーティングはアノテーションで設定できる&lt;br /&gt;
phpのファイルはsrc以下に保存&lt;br /&gt;
$ vim src/AppBundle/Controller/LuckyController.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace AppBundle\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Response;

class LuckyController
{
    /**
     * @Route(&amp;quot;/hey/yo&amp;quot;)
     */
    public function hoo()
    {
        return new Response(
            &#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;hey&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Twigテンプレートを返す&lt;br /&gt;
phpでない設定ファイルやテンプレートはapp以下に保存&lt;br /&gt;
$ vim src/AppBundle/Controller/LuckyController.php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace AppBundle\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class LuckyController extends Controller
{
    /**
     * @Route(&amp;quot;/lucky/number&amp;quot;)
     */
    public function numberAction()
    {
        $number = mt_rand(0, 100);

        return $this-&amp;gt;render(&#39;lucky/number.html.twig&#39;, array(
            &#39;number&#39; =&amp;gt; $number,
        ));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$ vim app/Resources/views/lucky/number.html.twig&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Your lucky number is {{ number }}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>composer</title>
      <link>https://freks.jp/tips/composer/</link>
      <pubDate>Mon, 12 Dec 2016 15:36:12 +0900</pubDate>
      
      <guid>https://freks.jp/tips/composer/</guid>
      <description>

&lt;h4 id=&#34;バージョンを指定してパッケージをインストールする&#34;&gt;バージョンを指定してパッケージをインストールする&lt;/h4&gt;

&lt;p&gt;Symfony2をインストール&lt;/p&gt;

&lt;p&gt;$ composer require &amp;ldquo;symfony/symfony: 2.*&amp;rdquo;&lt;/p&gt;

&lt;p&gt;see &lt;a href=&#34;http://tech.quartetcom.co.jp/2015/01/19/composer-practices/&#34;&gt;[初心者向け] composerのバージョン指定方法 | QUARTETCOM TECH BLOG&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cakephp</title>
      <link>https://freks.jp/tips/cakephp/</link>
      <pubDate>Fri, 25 Nov 2016 16:54:03 +0900</pubDate>
      
      <guid>https://freks.jp/tips/cakephp/</guid>
      <description>&lt;p&gt;モデルのデータベースアクセスをSQLで確認する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$data = $this-&amp;gt;SampleModel-&amp;gt;find(&#39;all);
$sqlLog = $this-&amp;gt;SampleModel-&amp;gt;getDataSource()-&amp;gt;getLog(false, false);
debug($sqlLog);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;json返す型&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function getJson()
{
    $this-&amp;gt;autoRender = false;
    if(!$this-&amp;gt;request-&amp;gt;is(&#39;ajax&#39;)) {
      throw new BadRequestException();
    }

    $result = &#39;NG&#39;;
    $data = $this-&amp;gt;request-&amp;gt;data;
    if (strlen(strlen($data[&#39;id&#39;]) !== 0) {
        // do something
        $result = &#39;OK&#39;;
    }
    echo json_encode(compact(&#39;result&#39;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;csvダウンロード型&lt;br /&gt;
これだと中身が多いとメモリを消費する&lt;br /&gt;
中身が多い場合は小分けにファイル保存して、ファイルダウンロードする&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function download($uid)
{
    $this-&amp;gt;autoRender = false;
    $this-&amp;gt;response-&amp;gt;type(&#39;csv&#39;);

    $fileName = &#39;1.csv&#39;;
    $this-&amp;gt;response-&amp;gt;download($fileName);

    $str = &amp;quot;sample, sample2&amp;quot;;
    $str .= &amp;quot;1, 2&amp;quot;;

    $str = mb_convert_encoding($str, &#39;SJIS-win&#39;, &#39;utf8&#39;);
    $this-&amp;gt;response-&amp;gt;body($str);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>